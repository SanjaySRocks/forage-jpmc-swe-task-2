From 63f36d7daf39196b8ddbd9eee2bf0dabd6a292c8 Mon Sep 17 00:00:00 2001
From: Sanjay Singh <30376256+SanjaySRocks@users.noreply.github.com>
Date: Sat, 29 Jun 2024 23:46:13 +0530
Subject: [PATCH] Applied changes for requirements

---
 src/App.tsx   | 29 +++++++++++++++++++++--------
 src/Graph.tsx | 16 ++++++++++++----
 2 files changed, 33 insertions(+), 12 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..bb17743 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  ShowGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      ShowGraph: false,
     };
   }
 
@@ -29,18 +31,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.ShowGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
-
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+          // Update the state by creating a new array of data that consists of
+          // Previous data in the state and the new data from server
+          this.setState({ 
+            data: serverResponds,
+            ShowGraph: true,
+          });
+        });
+        x++;
+        if ( x > 1000 ) {
+          clearInterval(interval);
+        }
+      }, 100);
   }
 
   /**
@@ -71,4 +84,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..c744437 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -2,7 +2,6 @@ import React, { Component } from 'react';
 import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
-
 /**
  * Props declaration for <Graph />
  */
@@ -14,7 +13,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +31,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +48,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price": "avg",
+      "timestamp":"distinct count"}`)
     }
   }
 
@@ -70,4 +78,4 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.39.2.windows.1

